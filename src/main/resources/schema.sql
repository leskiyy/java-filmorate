-- PUBLIC.MPA definition

create TABLE IF NOT EXISTS PUBLIC.MPA (
	MPA_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(5) NOT NULL UNIQUE,
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);

merge into PUBLIC.MPA (NAME) KEY (NAME) VALUES ('G');
merge into PUBLIC.MPA (NAME) KEY (NAME) VALUES ('PG');
merge into PUBLIC.MPA (NAME) KEY (NAME) VALUES ('PG-13');
merge into PUBLIC.MPA (NAME) KEY (NAME) VALUES ('R');
merge into PUBLIC.MPA (NAME) KEY (NAME) VALUES ('NC-17');

-- PUBLIC.FILMS definition

create TABLE IF NOT EXISTS PUBLIC.FILMS (
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(255) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	MPA_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILMS_MPA_FK FOREIGN KEY (MPA_ID) REFERENCES PUBLIC.MPA(MPA_ID)
);

-- PUBLIC.USERS definition

create TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING(255) NOT NULL UNIQUE,
	LOGIN CHARACTER VARYING(255) NOT NULL UNIQUE,
	NAME CHARACTER VARYING(255) NOT NULL,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);

-- PUBLIC.REVIEWS definition

create TABLE IF NOT EXISTS PUBLIC.REVIEWS (
	REVIEW_ID INTEGER NOT NULL AUTO_INCREMENT,
	CONTENT CHARACTER VARYING(10000) NOT NULL,
    IS_POSITIVE BOOLEAN NOT NULL,
	USER_ID INTEGER NOT NULL,
	FILM_ID INTEGER NOT NULL,
	CONSTRAINT REVIEWS_PK PRIMARY KEY (REVIEW_ID),
	CONSTRAINT REVIEWS_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON delete CASCADE,
	CONSTRAINT REVIEWS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON delete CASCADE,
	UNIQUE (USER_ID, FILM_ID)
);

-- PUBLIC.REVIEW_LIKES definition

create TABLE IF NOT EXISTS PUBLIC.REVIEW_LIKES (
	REVIEW_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	IS_DISLIKE BOOLEAN NOT NULL,
	CONSTRAINT REVIEW_LIKES_PK PRIMARY KEY (REVIEW_ID, USER_ID),
	CONSTRAINT REVIEW_LIKES_USERS_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON delete CASCADE,
	CONSTRAINT REVIEW_LIKES_REVIEWS_FK_2 FOREIGN KEY (REVIEW_ID) REFERENCES PUBLIC.REVIEWS(REVIEW_ID) ON delete CASCADE
);

-- PUBLIC.GENRES definition

create TABLE IF NOT EXISTS PUBLIC.GENRES (
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(32) NOT NULL UNIQUE,
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);

merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Комедия');
merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Драма');
merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Мультфильм');
merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Триллер');
merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Документальный');
merge into PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Боевик');

-- PUBLIC.FILM_GENRES definition

create TABLE IF NOT EXISTS PUBLIC.FILM_GENRES (
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_GENRES_PK PRIMARY KEY (FILM_ID,GENRE_ID),
	CONSTRAINT FILM_GENRES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON delete CASCADE,
	CONSTRAINT FILM_GENRES_GENRES_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES(GENRE_ID)
);

-- PUBLIC.DIRECTORS definition

create TABLE IF NOT EXISTS PUBLIC.DIRECTORS (
	DIRECTOR_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(32) NOT NULL,
	CONSTRAINT DIRECTORS_PK PRIMARY KEY (DIRECTOR_ID)
);

-- PUBLIC.FILM_DIRECTORS definition

create TABLE IF NOT EXISTS PUBLIC.FILM_DIRECTORS (
	FILM_ID INTEGER NOT NULL,
	DIRECTOR_ID INTEGER NOT NULL,
    CONSTRAINT FILM_DIRECTORS_PK PRIMARY KEY (FILM_ID,DIRECTOR_ID),
	CONSTRAINT FILM_DIRECTORS_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON delete CASCADE,
	CONSTRAINT FILM_DIRECTORS_DIRECTORS_FK FOREIGN KEY (DIRECTOR_ID) REFERENCES PUBLIC.DIRECTORS(DIRECTOR_ID) ON delete CASCADE
);

-- PUBLIC.FRIENDS definition

create TABLE IF NOT EXISTS PUBLIC.FRIENDS (
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID, FRIEND_ID),
	CONSTRAINT FRIENDS_USERS_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE,
	CONSTRAINT FRIENDS_USERS_FK_2 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE
);

-- PUBLIC.FILM_LIKES definition

create TABLE IF NOT EXISTS PUBLIC.FILM_LIKES (
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT FILM_LIKES_PK PRIMARY KEY (FILM_ID, USER_ID),
	CONSTRAINT FILM_LIKES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID)  ON delete CASCADE,
	CONSTRAINT FILM_LIKES_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID)  ON delete CASCADE
);

-- PUBLIC.EVENTS definition

create TABLE IF NOT EXISTS PUBLIC.EVENTS (
	EVENT_ID INTEGER NOT NULL AUTO_INCREMENT,
	USER_ID INTEGER NOT NULL,
	EVENT_TYPE CHARACTER VARYING(6) NOT NULL
		CHECK (EVENT_TYPE IN('LIKE', 'REVIEW', 'FRIEND')),
	OPERATION CHARACTER VARYING(6) NOT NULL
		CHECK (OPERATION IN('REMOVE', 'ADD','UPDATE')),
	ENTITY_ID INTEGER NOT NULL,
	CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP NOT NULL,
	CONSTRAINT EVENTS_PK PRIMARY KEY (EVENT_ID),
	CONSTRAINT EVENTS_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON delete CASCADE
);

create TABLE IF NOT EXISTS PUBLIC.DELETED_USER_IDS (
	DELETED_USER_ID INTEGER NOT NULL,
	CONSTRAINT DELETED_USER_IDS_PK PRIMARY KEY (DELETED_USER_ID)
);

-- PUBLIC.DELETED_USERS definition

create TABLE IF NOT EXISTS PUBLIC.DELETED_USERS (
                                                 DELETED_USER_ID INTEGER NOT NULL,
                                                 CONSTRAINT DELETED_USERS_PK PRIMARY KEY (DELETED_USER_ID)
);
