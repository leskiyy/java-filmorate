--DROP FOR POSTMAN TESTS

--DROP TABLE LIKES ;
--DROP TABLE FILM_GENRES;
--DROP TABLE FILMS;
--DROP TABLE FRIENDS ;
--DROP TABLE USERS ;
--DROP TABLE MPA ;
--DROP TABLE GENRES ;

-- PUBLIC.MPA definition

CREATE TABLE IF NOT EXISTS PUBLIC.MPA (
	MPA_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(5) NOT NULL UNIQUE,
	CONSTRAINT MPA_PK PRIMARY KEY (MPA_ID)
);

MERGE INTO PUBLIC.MPA (NAME) KEY (NAME) VALUES ('G');
MERGE INTO PUBLIC.MPA (NAME) KEY (NAME) VALUES ('PG');
MERGE INTO PUBLIC.MPA (NAME) KEY (NAME) VALUES ('PG-13');
MERGE INTO PUBLIC.MPA (NAME) KEY (NAME) VALUES ('R');
MERGE INTO PUBLIC.MPA (NAME) KEY (NAME) VALUES ('NC-17');

-- PUBLIC.FILMS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILMS (
	FILM_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(255) NOT NULL,
	DESCRIPTION CHARACTER VARYING(200) NOT NULL,
	RELEASE_DATE DATE NOT NULL,
	DURATION INTEGER NOT NULL,
	MPA_ID INTEGER,
	CONSTRAINT FILMS_PK PRIMARY KEY (FILM_ID),
	CONSTRAINT FILMS_MPA_FK FOREIGN KEY (MPA_ID) REFERENCES PUBLIC.MPA(MPA_ID)
);

-- PUBLIC.USERS definition

CREATE TABLE IF NOT EXISTS PUBLIC.USERS (
	USER_ID INTEGER NOT NULL AUTO_INCREMENT,
	EMAIL CHARACTER VARYING(255) NOT NULL UNIQUE,
	LOGIN CHARACTER VARYING(255) NOT NULL UNIQUE,
	NAME CHARACTER VARYING(255) NOT NULL,
	BIRTHDAY DATE NOT NULL,
	CONSTRAINT USERS_PK PRIMARY KEY (USER_ID)
);

-- PUBLIC.GENRES definition

CREATE TABLE IF NOT EXISTS PUBLIC.GENRES (
	GENRE_ID INTEGER NOT NULL AUTO_INCREMENT,
	NAME CHARACTER VARYING(32) NOT NULL UNIQUE,
	CONSTRAINT GENRES_PK PRIMARY KEY (GENRE_ID)
);


MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Комедия');
MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Драма');
MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Мультфильм');
MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Триллер');
MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Документальный');
MERGE INTO PUBLIC.GENRES (NAME) KEY (NAME) VALUES ('Боевик');

-- PUBLIC.FILM_GENRES definition

CREATE TABLE IF NOT EXISTS PUBLIC.FILM_GENRES (
	FILM_ID INTEGER NOT NULL,
	GENRE_ID INTEGER NOT NULL,
    CONSTRAINT FILM_GENRES_PK PRIMARY KEY (FILM_ID,GENRE_ID),
	CONSTRAINT FILM_GENRE_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID) ON DELETE CASCADE,
	CONSTRAINT FILM_GENRE_GENRES_FK FOREIGN KEY (GENRE_ID) REFERENCES PUBLIC.GENRES(GENRE_ID)
);

-- PUBLIC.FRIENDS definition

CREATE TABLE IF NOT EXISTS PUBLIC.FRIENDS (
	USER_ID INTEGER NOT NULL,
	FRIEND_ID INTEGER NOT NULL,
	CONSTRAINT FRIENDS_PK PRIMARY KEY (USER_ID, FRIEND_ID),
	CONSTRAINT FRIENDS_USERS_FK_1 FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE,
	CONSTRAINT FRIENDS_USERS_FK_2 FOREIGN KEY (FRIEND_ID) REFERENCES PUBLIC.USERS(USER_ID) ON DELETE CASCADE
);

-- PUBLIC.LIKES definition

CREATE TABLE IF NOT EXISTS PUBLIC.LIKES (
	FILM_ID INTEGER NOT NULL,
	USER_ID INTEGER NOT NULL,
	CONSTRAINT LIKES_PK PRIMARY KEY (FILM_ID, USER_ID),
	CONSTRAINT LIKES_FILMS_FK FOREIGN KEY (FILM_ID) REFERENCES PUBLIC.FILMS(FILM_ID)  ON DELETE CASCADE,
	CONSTRAINT LIKES_USERS_FK FOREIGN KEY (USER_ID) REFERENCES PUBLIC.USERS(USER_ID)  ON DELETE CASCADE
);
